name: Release

on:
  workflow_call:
    inputs:
      id:
        description: 'Optionally specify and ID to track this workflow programmatically'
        required: false
        type: string
        default: ''
      tag:
        description: 'Optionally specify tag (Default = <semver-minor-auto-bump>)'
        required: false
        type: string
    secrets:
      # Dockerhub credentials to interact with the registry
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_TOKEN:
        required: true

jobs:
  Id:
    runs-on: ubuntu-latest
    steps:
      - name: ${{ inputs.id }}
        if: "${{ inputs.id != '' }}"
        run: |
          echo "${{ inputs.id }}"

  Tag-Repository:
    runs-on: ubuntu-latest
    outputs:
      previous-version: ${{ steps.find-previous-version.outputs.tag }}
      previous-version-sha1: ${{ steps.find-previous-version-sha1.outputs.sha1 }}
      new-version: ${{ steps.calculate-new-version.outputs.new-version }}
      new-version-sha1: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2

      # Get latest semver tag/version and its corresponding SHA1

      - id: find-previous-version
        name: Find previous version
        uses: actions-ecosystem/action-get-latest-tag@v1
        with:
          semver_only: true
          initial_version: 0.0.0
          with_initial_version: true

      - id: find-previous-version-sha1
        name: Find previous version SHA1
        run: |
          echo "sha1=$(git rev-list ${{ steps.find-previous-version.outputs.tag }} | head -1 | tr -d '\n')" >> $GITHUB_OUTPUT

      # Build and archive changelog

      - name: Build changelog
        run: |
          echo "$(git log ${{ steps.find-previous-version.outputs.tag }}..${{ github.sha }})" >> CHANGELOG

      - name: Archive changelog
        uses: actions/upload-artifact@v3
        with:
          name: CHANGELOG
          path: CHANGELOG

      # Calculate new version

      - name: Validate provided tag (If tag provided)
        uses: rubenesp87/semver-validation-action@0.1.0
        if: "${{ inputs.tag != '' }}"
        with:
          version: ${{ inputs.tag }}

      - id: bump-semver
        name: Calculate minor semver bump (If tag not provided and we have new commits)
        uses: thejeff77//action-bump-semver@v1.0.0
        if: "${{ (inputs.tag == '') && (steps.find-previous-version-sha1.outputs.sha1 != github.sha) }}"
        with:
          current_version: ${{ steps.find-previous-version.outputs.tag }}
          level: minor

      - id: calculate-new-version
        name: Calculate new version
        run: |
          if [[ "${{ inputs.tag }}" != "" ]]; then
            echo "New provided version"
            echo "new-version=${{ inputs.tag }}" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.find-previous-version-sha1.outputs.sha1 }}" == "${{ github.sha }}" ]]; then
            echo "No new version"
            echo "new-version=${{ steps.find-previous-version.outputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "New auto-bump version"
            echo "new-version=${{ steps.bump-semver.outputs.new_version }}" >> $GITHUB_OUTPUT
          fi

      # Push new tag, only when it applies

      - name: Push new tag if we have it
        uses: thejeff77/action-push-tag@v1.0.0
        if: '${{ steps.calculate-new-version.outputs.new-version != steps.find-previous-version.outputs.tag }}'
        with:
          tag: ${{ steps.calculate-new-version.outputs.new-version }}

  Tag-Image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.tag-docker-image.outputs.image }}
      image-digest: ${{ steps.tag-docker-image.outputs.image-digest }}
    needs:
      - Tag-Repository
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Wait for ${{ github.repository }}:${{ github.sha }} to be available
        uses: nick-fields/retry@v2
        with:
          command: |
            docker manifest inspect ${{ github.repository }}:${{ github.sha }}
          retry_wait_seconds: 10
          timeout_seconds: 60 # Seconds to wait for each attempt, 1 minutes should be more than enough to check if manifests exists in registry
          max_attempts: 180 # This accounts for a minimum of half an hour in total, if you multiply it by retry_wait_seconds

      # Get Google's crane tool, used to retag docker images while preserving original digest

      - name: Get crane tool for retagging
        uses: engineerd/configurator@v0.0.1
        with:
          name: 'crane'
          url: 'https://github.com/google/go-containerregistry/releases/download/v0.14.0/go-containerregistry_Linux_x86_64.tar.gz'
          pathInArchive: 'crane'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      # Tag image

      - id: tag-docker-image
        name: Tag docker image
        run: |
          crane tag ${{ github.repository }}:${{ github.sha }} ${{ needs.Tag-Repository.outputs.new-version }}
          echo "image=${{ github.repository }}:${{ needs.Tag-Repository.outputs.new-version }}" >> $GITHUB_OUTPUT
          echo "image-digest=$(crane digest ${{ github.repository }}:${{ needs.Tag-Repository.outputs.new-version }})" >> $GITHUB_OUTPUT

  Info:
    runs-on: ubuntu-latest
    needs:
      - Tag-Repository
      - Tag-Image
    steps:
      - name: Build release output file
        uses: jsdaniell/create-json@v1.2.2
        with:
          name: release.json
          json: |
            {
              "service": "${{ github.repository }}",
              "previous-version": "${{ needs.Tag-Repository.outputs.previous-version }}",
              "previous-version-sha1": "${{ needs.Tag-Repository.outputs.previous-version-sha1 }}",
              "new-version": "${{ needs.Tag-Repository.outputs.new-version }}",
              "new-version-sha1": "${{ needs.Tag-Repository.outputs.new-version-sha1 }}",
              "new-image-name": "${{ needs.Tag-Image.outputs.image }}",
              "new-image-digest": "${{ needs.Tag-Image.outputs.image-digest }}"
            }

      - name: Print release output file
        run: |
          cat release.json

      - name: Archive release output file
        uses: actions/upload-artifact@v3
        with:
          name: release.json
          path: release.json
